<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



  

<title type="text">FunctionalTalks.org</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml" />
<link rel="alternate" type="text/html" href="http://localhost:4000/" />
<updated>2014-08-05T20:57:37+10:00</updated>
<id>http://localhost:4000/</id>
<author>
  <name>Chris Myers</name>
  <uri>http://localhost:4000/</uri>
  <email>you@email.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Alissa Pajer: How Haskell changed my brain]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2014/06/15/alissa-pajer-how-haskell-changed-my-brain/"/>
  <id>http://localhost:4000/2014/06/15/alissa-pajer-how-haskell-changed-my-brain</id>
  <published>2014-06-15T00:00:00+10:00</published>
  <updated>2014-06-15T00:00:00+10:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#category%20theory" term="category theory" /><category scheme="http://localhost:4000/tags/#haskell" term="haskell" /><category scheme="http://localhost:4000/tags/#scala" term="scala" /><category scheme="http://localhost:4000/tags/#scalaz" term="scalaz" /><category scheme="http://localhost:4000/tags/#yoneda" term="yoneda" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe src=&quot;//player.vimeo.com/video/96639840&quot; width=&quot;700&quot; height=&quot;394&quot; frameborder=&quot;0&quot; title=&quot;Alissa Pajer - How Haskell is Changing my Brain&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;Alissa Pajer’s (&lt;a href=&quot;http://twitter.com/alissapajer&quot;&gt;@alissapajer&lt;/a&gt;) FlatMap Oslo’s talk starts curiously with “Yoneda Yay!” - &lt;em&gt;so you know it’s going to be good.&lt;/em&gt; But, is this a category theory talk, or something about Haskell? &lt;em&gt;Both&lt;/em&gt;, of course! Alissa shows us how learning Haskell strengthens our understanding of abstractions as it makes certain concepts more obvious. It also forces us to think more clearly about our abstractions.&lt;/p&gt;

&lt;p&gt;The Yondea Lemma is a concept that explores the equivalence between two types, that is, types that can be tranformed from one type into another without losing information.  She explains it way better.&lt;/p&gt;

&lt;p&gt;Alissa knows her stuff; she has studied pure mathematics and currently employs her functional programming skillz at RichRelevance.  &lt;/p&gt;

&lt;p&gt;You can find the talk &lt;a href=&quot;http://vimeo.com/96639840&quot;&gt;here on Vimeo&lt;/a&gt; and &lt;a href=&quot;http://alissapajer.github.io/conferenceslides/flatmaposlo2014/&quot;&gt;the slides here&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2014/06/15/alissa-pajer-how-haskell-changed-my-brain/&quot;&gt;Alissa Pajer: How Haskell changed my brain&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on June 15, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Rúnar Óli Bjarnason: Functional Programming is Terrible]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2014/03/31/runar-oli-bjarnason-functional-programming-is-terrible/"/>
  <id>http://localhost:4000/2014/03/31/runar-oli-bjarnason-functional-programming-is-terrible</id>
  <published>2014-03-31T00:00:00+11:00</published>
  <updated>2014-03-31T00:00:00+11:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#feelings" term="feelings" /><category scheme="http://localhost:4000/tags/#scala" term="scala" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/hzf3hTUKk8U&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://functionaltalks.org/?s=Runar&quot;&gt;Rúnar Óli Bjarnason&lt;/a&gt; (&lt;a href=&quot;http://twitter.com/runarorama&quot;&gt;@runarorama&lt;/a&gt;) says, “Functional programming makes us happy… programming is exhilaration… programming is exciting.”&lt;/p&gt;
&lt;p&gt;He says this however, after telling us why Scala is not always up to the task of the requirements of functional programming. It lacks tail call elimination; forcing the use of trampolines. It boxes functions leaving a greater memory footprint. It struggles with higher kinds; forcing bizarre type annotation boiler plate.&lt;/p&gt;
&lt;p&gt;But he says, “functional programming is awesome” as it leads to predictable, testable, modular, smaller, and easier to reason about code. We feel good and we have pride in our work as it “looks and feels clean.”&lt;/p&gt;
&lt;p&gt;He says, “we have to insist that Scala gets better at Functional Programming or we have to leave it behind.”&lt;/p&gt;
&lt;p&gt;Come get in touch with your feelings with Rúnar. &lt;em&gt;Your happiness matters.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can find the talk &lt;a href=&quot;http://youtu.be/hzf3hTUKk8U&quot;&gt;here on YouTube&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2014/03/31/runar-oli-bjarnason-functional-programming-is-terrible/&quot;&gt;Rúnar Óli Bjarnason: Functional Programming is Terrible&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on March 31, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Eugene Yokota: Learning Scalaz]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2014/03/16/eugene-yokota-learning-scalaz/"/>
  <id>http://localhost:4000/2014/03/16/eugene-yokota-learning-scalaz</id>
  <published>2014-03-16T00:00:00+11:00</published>
  <updated>2014-03-16T00:00:00+11:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#scala" term="scala" /><category scheme="http://localhost:4000/tags/#scalaz" term="scalaz" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/jyMIvcUxOJ0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Eugene Yokota (&lt;a href=&quot;http://twitter.com/eed3si9n&quot;&gt;@eed3si9n&lt;/a&gt;) runs a blog called &lt;a href=&quot;http://eed3si9n.com/learning-scalaz/&quot;&gt;learning Scalaz&lt;/a&gt; where he has documented honestly and thoroughly his experience approaching pure functional programming in Scala. It is a wonderful goto for Scalaz, especially the &lt;a href=&quot;http://eed3si9n.com/learning-scalaz/scalaz-cheatsheet.html&quot;&gt;cheat sheet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this talk he describes his learning process and how he has approached Scalaz, sharing his insights and his favourite resources. Unsurprisingly the best approach he recommends is trying it out yourself and playing with the REPL.&lt;/p&gt;
&lt;p&gt;If you are learning Scalaz you may also be interested in &lt;a href=&quot;http://functionaltalks.org/2013/05/27/nick-partridge-scalaz/&quot;&gt;Nick Partridge’s great intro to Scalaz&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can find the talk &lt;a href=&quot;https://thenewcircle.com/s/post/1578/learning_scalaz_eugene_yokota_video&quot;&gt;here on NewCircle&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2014/03/16/eugene-yokota-learning-scalaz/&quot;&gt;Eugene Yokota: Learning Scalaz&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on March 16, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Mark Hibberd & Tony Morris: Argonaut - pure functional JSON]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2014/03/05/mark-hibberd-tony-morris-argonaut-pure-functional-json/"/>
  <id>http://localhost:4000/2014/03/05/mark-hibberd-tony-morris-argonaut-pure-functional-json</id>
  <published>2014-03-05T00:00:00+11:00</published>
  <updated>2014-03-05T00:00:00+11:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#ADT" term="ADT" /><category scheme="http://localhost:4000/tags/#argonaut" term="argonaut" /><category scheme="http://localhost:4000/tags/#javascript" term="javascript" /><category scheme="http://localhost:4000/tags/#JSON" term="JSON" /><category scheme="http://localhost:4000/tags/#lenses" term="lenses" /><category scheme="http://localhost:4000/tags/#scala" term="scala" /><category scheme="http://localhost:4000/tags/#scalaz" term="scalaz" /><category scheme="http://localhost:4000/tags/#Type%20Classes" term="Type Classes" /><category scheme="http://localhost:4000/tags/#zippers" term="zippers" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/fBiLrPbZxxM&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Mark Hibberd (&lt;a href=&quot;http://twitter.com/markhibberd&quot;&gt;@markhibberd&lt;/a&gt;) and Tony Morris (&lt;a href=&quot;http://twitter.com/dibblego&quot;&gt;@dibblego&lt;/a&gt;) show us you can serialise and deserialise JSON without hating yourself.  &lt;a href=&quot;http://argonaut.io&quot;&gt;Argonaut&lt;/a&gt; is a purely functional JSON library that uses Lenses and Zippers to traverse and modify JSON structures while remaining completely immutable.&lt;/p&gt;
&lt;p&gt;This talk has a good overview of Algebraic Data Types, functional lenses, Type classes and zippers.&lt;/p&gt;
&lt;p&gt;Oh, and it uses &lt;a href=&quot;https://github.com/scalaz/scalaz&quot;&gt;Scalaz&lt;/a&gt; under the hood.&lt;/p&gt;
&lt;p&gt;You can find the talk &lt;a href=&quot;http://youtu.be/fBiLrPbZxxM&quot;&gt;here on YouTube&lt;/a&gt; and can find &lt;a href=&quot;http://a.confui.com/public/conferences/5137e4d6680d707f99000005/topics/515a3b78567ee9246a000022/slides&quot;&gt;the slides here&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2014/03/05/mark-hibberd-tony-morris-argonaut-pure-functional-json/&quot;&gt;Mark Hibberd & Tony Morris: Argonaut - pure functional JSON&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on March 05, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Tony Morris: Monad Transformers]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/10/27/tony-morris-monad-transformers/"/>
  <id>http://localhost:4000/2013/10/27/tony-morris-monad-transformers</id>
  <published>2013-10-27T00:00:00+11:00</published>
  <updated>2013-10-27T00:00:00+11:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#bind" term="bind" /><category scheme="http://localhost:4000/tags/#haskell" term="haskell" /><category scheme="http://localhost:4000/tags/#monad%20transformer" term="monad transformer" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe src=&quot;//player.vimeo.com/video/73648150&quot; width=&quot;500&quot; height=&quot;281&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Tony Morris (&lt;a href=&quot;http://twitter.com/dibblego&quot;&gt;@dibblego&lt;/a&gt;) is &lt;a href=&quot;http://functionaltalks.org/?s=tony+morris&quot;&gt;no stranger to this site&lt;/a&gt; and in this talk he unlocks &lt;a href=&quot;http://functionaltalks.org/?s=monad+transformer&quot;&gt;monad transformers&lt;/a&gt;. His examples are in Haskell but as always he explains the concepts for a general audience.&lt;/p&gt;
&lt;p&gt;Monad transformers exist, mostly because monads don’t compose in the general case. Embracing them helps simplify your monadic code a great deal and is something you can use in your &lt;em&gt;everyday&lt;/em&gt; programming.&lt;/p&gt;
&lt;p&gt;You can find the talk &lt;a href=&quot;http://vimeo.com/73648150&quot;&gt;here on Vimeo&lt;/a&gt; and &lt;a href=&quot;http://dl.dropboxusercontent.com/u/7810909/media/doc/monad-transformers.pdf&quot;&gt;the slides here&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/10/27/tony-morris-monad-transformers/&quot;&gt;Tony Morris: Monad Transformers&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on October 27, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Manuel Chakravarty: Do Extraterrestrials Use Functional Programming?]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/10/27/manuel-chakravarty-do-extraterrestrials-use-functional-programming/"/>
  <id>http://localhost:4000/2013/10/27/manuel-chakravarty-do-extraterrestrials-use-functional-programming</id>
  <published>2013-10-27T00:00:00+11:00</published>
  <updated>2013-10-27T00:00:00+11:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#Alan%20Turing" term="Alan Turing" /><category scheme="http://localhost:4000/tags/#aliens" term="aliens" /><category scheme="http://localhost:4000/tags/#Haskell%20Curry" term="Haskell Curry" /><category scheme="http://localhost:4000/tags/#Howard" term="Howard" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/gUZYHo_nrVU?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Manuel Chakravarty (&lt;a href=&quot;http://twitter.com/TacticalGrace&quot;&gt;@TacticalGrace&lt;/a&gt;) answers the question, was functional programming invented or was it discovered? He argues that it was in fact discovered and therefore if aliens were to visit us they were be aware of functional programming just as much as the law of gravity or relativity. Why they steal our underwear from the clothes line is still a mystery.&lt;/p&gt;
&lt;p&gt;The slides are hard to see in the video so it is probably best having the slide deck open while you watch.&lt;/p&gt;
&lt;p&gt;You can find the talk &lt;a href=&quot;http://youtu.be/gUZYHo_nrVU&quot;&gt;here on YouTube&lt;/a&gt; and &lt;a href=&quot;https://speakerdeck.com/mchakravarty/do-extraterrestrials-use-functional-programming&quot;&gt;the slides here&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/10/27/manuel-chakravarty-do-extraterrestrials-use-functional-programming/&quot;&gt;Manuel Chakravarty: Do Extraterrestrials Use Functional Programming?&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on October 27, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Dan Rosen: Declutter your code with monads]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/09/27/dan-rosen-declutter-your-code-with-monads/"/>
  <id>http://localhost:4000/2013/09/27/dan-rosen-declutter-your-code-with-monads</id>
  <published>2013-09-27T00:00:00+10:00</published>
  <updated>2013-09-27T00:00:00+10:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#flatmap" term="flatmap" /><category scheme="http://localhost:4000/tags/#for-comprehension" term="for-comprehension" /><category scheme="http://localhost:4000/tags/#list%20monad" term="list monad" /><category scheme="http://localhost:4000/tags/#map" term="map" /><category scheme="http://localhost:4000/tags/#monad" term="monad" /><category scheme="http://localhost:4000/tags/#option%20monad" term="option monad" /><category scheme="http://localhost:4000/tags/#scala" term="scala" /><category scheme="http://localhost:4000/tags/#scalaz" term="scalaz" /><category scheme="http://localhost:4000/tags/#validation%20monad" term="validation monad" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/Mw_Jnn_Y5iA?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Dan Rosen (&lt;a href=&quot;http://twitter.com/mergeconflict&quot;&gt;@mergeconflict&lt;/a&gt;) does an excellent job in this talk of demystifying monads through a thoroughly practical example of how the &amp;#8220;monad design pattern&amp;#8221; can be used to de-clutter your code. &lt;/p&gt;
&lt;p&gt;He gives a couple of examples using the Option, Validation and List monads. He notes the similarities between these examples and introduces the notion of for-comprehensions to declutter his examples even further. &lt;/p&gt;
&lt;p&gt;Dan is a great communicator and this is an easy talk to watch and understand. Perfect for those investigating the power of monads. &lt;/p&gt;
&lt;p&gt;You can find the talk &lt;a href=&quot;http://youtu.be/Mw_Jnn_Y5iA&quot;&gt;here on YouTube&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/09/27/dan-rosen-declutter-your-code-with-monads/&quot;&gt;Dan Rosen: Declutter your code with monads&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on September 27, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[John Carmack: Thoughts on Haskell]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/08/26/john-carmack-thoughts-on-haskell/"/>
  <id>http://localhost:4000/2013/08/26/john-carmack-thoughts-on-haskell</id>
  <published>2013-08-26T00:00:00+10:00</published>
  <updated>2013-08-26T00:00:00+10:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#doom" term="doom" /><category scheme="http://localhost:4000/tags/#haskell" term="haskell" /><category scheme="http://localhost:4000/tags/#immutability" term="immutability" /><category scheme="http://localhost:4000/tags/#quake" term="quake" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/1PhArSujR_A?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;John Carmack (&lt;a href=&quot;http://twitter.com/ID_AA_Carmack&quot;&gt;@ID_AA_Carmack&lt;/a&gt;) is a legend. He has been a legend (in our opinion) since Commander Keen was released in 1990 for Id Software. In the world of 3d gaming John and his team has had many breakthrough hits with Wolfenstein 3D, Doom and Quake series. When it comes to achievements Carmack has runs on the board.&lt;/p&gt;
&lt;p&gt;Which is why many ears were pricked by his keynote at Quakecon 2013 when he shared his thoughts on functional programming and especially Haskell. He speaks very enthusiastically on the benefits of immutability and how software becomes more compositional, easier to reason about and less likely to break when embracing a “brutally pure” language such as Haskell.&lt;/p&gt;
&lt;p&gt;If you needed examples of Haskell in “the real world”, this talk will be one for your armoury.&lt;/p&gt;
&lt;p&gt;You can find the talk &lt;a href=&quot;http://youtu.be/1PhArSujR_A&quot;&gt;here on YouTube&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/08/26/john-carmack-thoughts-on-haskell/&quot;&gt;John Carmack: Thoughts on Haskell&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on August 26, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Paul Chiusano: Advanced Stream Processing in Scala]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/08/25/paul-chiusano-advanced-stream-processing-in-scala/"/>
  <id>http://localhost:4000/2013/08/25/paul-chiusano-advanced-stream-processing-in-scala</id>
  <published>2013-08-25T00:00:00+10:00</published>
  <updated>2013-08-25T00:00:00+10:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#io" term="io" /><category scheme="http://localhost:4000/tags/#scala" term="scala" /><category scheme="http://localhost:4000/tags/#scalaz" term="scalaz" /><category scheme="http://localhost:4000/tags/#scalaz-stream" term="scalaz-stream" /><category scheme="http://localhost:4000/tags/#stream" term="stream" /><category scheme="http://localhost:4000/tags/#stream%20processing" term="stream processing" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/8fC2V9HX_m8?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Paul Chiusano (&lt;a href=&quot;http://twitter.com/pchiusano&quot;&gt;@pchiusano&lt;/a&gt;), co-author of &lt;a href=&quot;http://www.manning.com/bjarnason/&quot;&gt;Functional Programming in Scala&lt;/a&gt; dives deep into advanced stream processing in Scala showing how streams are compositional, efficient and safe. This is a great talk for those wanting to utilise the &lt;code&gt;scalaz-stream&lt;/code&gt; library.&lt;/p&gt;
&lt;p&gt;You can find other talks Paul has done on &lt;a href=&quot;http://functionaltalks.org/?s=Paul+Chiusano&quot;&gt;functionaltalks.org here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can find the talk &lt;a href=&quot;http://youtu.be/8fC2V9HX_m8&quot;&gt;here on YouTube&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/08/25/paul-chiusano-advanced-stream-processing-in-scala/&quot;&gt;Paul Chiusano: Advanced Stream Processing in Scala&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on August 25, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Miles Sabin: Shapeless - Exploring Generic Programming in Scala]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/07/30/miles-sabin-shapeless-exploring-generic-programming-in-scala/"/>
  <id>http://localhost:4000/2013/07/30/miles-sabin-shapeless-exploring-generic-programming-in-scala</id>
  <published>2013-07-30T00:00:00+10:00</published>
  <updated>2013-07-30T00:00:00+10:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#generics" term="generics" /><category scheme="http://localhost:4000/tags/#HList" term="HList" /><category scheme="http://localhost:4000/tags/#nescala" term="nescala" /><category scheme="http://localhost:4000/tags/#polytypic%20programming" term="polytypic programming" /><category scheme="http://localhost:4000/tags/#scala" term="scala" /><category scheme="http://localhost:4000/tags/#scalaz" term="scalaz" /><category scheme="http://localhost:4000/tags/#shapeless" term="shapeless" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/GDbNxL8bqkY?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Miles Sabin (&lt;a href=&quot;http://twitter.com/milessabin&quot;&gt;@milessabin&lt;/a&gt;) is a master of type systems. In this talk he gives an introduction to (and a brief history of) &lt;a href=&quot;https://github.com/milessabin/shapeless&quot;&gt;Shapeless&lt;/a&gt; and focuses on &lt;code&gt;HList&lt;/code&gt;s or &lt;em&gt;heterogenous&lt;/em&gt; lists. Shapeless is an exploration into generic programming in Scala. Did you know it was possible to map a function over a &lt;code&gt;HList&lt;/code&gt;? That is possibly the sound of your brain melting in awe.&lt;/p&gt;
&lt;p&gt;Shapeless is quickly becoming main stream and is in products like &lt;a href=&quot;http://spray.io&quot;&gt;Spray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Miles is currently developing Shapeless full time and is also a partner at &lt;a href=&quot;http://underscoreconsulting.com&quot;&gt;_.underscore&lt;/a&gt; consulting. &lt;/p&gt;
&lt;p&gt;You can find the talk &lt;a href=&quot;http://youtu.be/GDbNxL8bqkY&quot;&gt;on YouTube&lt;/a&gt; and the &lt;a href=&quot;https://speakerdeck.com/milessabin/shapeless-exploring-generic-programming-in-scala&quot;&gt;slides can be found here&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/07/30/miles-sabin-shapeless-exploring-generic-programming-in-scala/&quot;&gt;Miles Sabin: Shapeless - Exploring Generic Programming in Scala&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on July 30, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Wilkes Joiner: Functional Reactive Programming]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/07/21/wilkes-joiner-functional-reactive-programming/"/>
  <id>http://localhost:4000/2013/07/21/wilkes-joiner-functional-reactive-programming</id>
  <published>2013-07-21T00:00:00+10:00</published>
  <updated>2013-07-21T00:00:00+10:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#bacon.js" term="bacon.js" /><category scheme="http://localhost:4000/tags/#clojure" term="clojure" /><category scheme="http://localhost:4000/tags/#clojureScript" term="clojureScript" /><category scheme="http://localhost:4000/tags/#frp" term="frp" /><category scheme="http://localhost:4000/tags/#Functional%20Reactive%20Programming" term="Functional Reactive Programming" /><category scheme="http://localhost:4000/tags/#Microsoft%E2%80%99s%20Reactive%20Extensions" term="Microsoft’s Reactive Extensions" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/nket0K1RXU4?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Wilkes Joiner (&lt;a href=&quot;http://twitter.com/wilkesj&quot;&gt;@wilkesj&lt;/a&gt;) introduces us to Functional Reactive Programming and shows how traditional “callback hell” can be replaced with streams of events that are composeable. Hello &lt;code&gt;Observable&lt;/code&gt; - the type that is filter-able and flatmap-able. Wilkes demonstrates how the code becomes much easier to reason about and much easier to control and reuse.&lt;/p&gt;
&lt;p&gt;You can find the talk &lt;a href=&quot;http://youtu.be/nket0K1RXU4&quot;&gt;here on YouTube&lt;/a&gt;, the &lt;a href=&quot;https://speakerdeck.com/jorendorff/functional-reactive-programming&quot;&gt;slides here&lt;/a&gt; and the &lt;a href=&quot;https://github.com/Cicayda/yolk-examples&quot;&gt;code on GitHub&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/07/21/wilkes-joiner-functional-reactive-programming/&quot;&gt;Wilkes Joiner: Functional Reactive Programming&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on July 21, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Alexander Gounares: All your cores are belong to us]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/07/17/alexander-gounares-all-your-cores-belong-to-us/"/>
  <id>http://localhost:4000/2013/07/17/alexander-gounares-all-your-cores-belong-to-us</id>
  <published>2013-07-17T00:00:00+10:00</published>
  <updated>2013-07-17T00:00:00+10:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#Erlang" term="Erlang" /><category scheme="http://localhost:4000/tags/#multi-core" term="multi-core" /><category scheme="http://localhost:4000/tags/#threading" term="threading" /><category scheme="http://localhost:4000/tags/#VM" term="VM" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/GyHXLIHtPDM?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Alexander Gounares seems like a rather enterprising chap. He has started a company that is doing really interesting things with Erlang and multi-core programming. The journey has been far from smooth sailing however. His company discovered that (quite counter-intuitively) the more cores they threw at a programme, the worse it performed. This was due to (amongst other things) locking inside the Erlang VM. This is an interesting talk discussing how they improved the VM to perform at incredibles scales.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;http://www.erlang-factory.com&quot;&gt;Erlang Factory&lt;/a&gt; for the heads up for &lt;a href=&quot;http://www.erlang-factory.com/conference/SFBay2013/talks&quot;&gt;heaps of great talks on Erlang&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can find the talk &lt;a href=&quot;http://youtu.be/GyHXLIHtPDM&quot;&gt;here on Youtube&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/07/17/alexander-gounares-all-your-cores-belong-to-us/&quot;&gt;Alexander Gounares: All your cores are belong to us&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on July 17, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Katie Miller: Superhero monads]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/07/03/katie-miller-superhero-monads/"/>
  <id>http://localhost:4000/2013/07/03/katie-miller-superhero-monads</id>
  <published>2013-07-03T00:00:00+10:00</published>
  <updated>2013-07-03T00:00:00+10:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#haskell" term="haskell" /><category scheme="http://localhost:4000/tags/#java" term="java" /><category scheme="http://localhost:4000/tags/#monads" term="monads" /><category scheme="http://localhost:4000/tags/#superheroes" term="superheroes" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/MlZCiiKGbb0?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;“Like superheroes,” Katie Miller (&lt;a href=&quot;http://twitter.com/codemiller&quot;&gt;@codemiller&lt;/a&gt;) tells us, “monads are found in a particular setting… have a particular costume… are not the villains… and have special (possibly unexpected) abilities.” An intriguing introduction to this whirlwind tour of functional programming and the superhero monad. A great introductory presentation.&lt;/p&gt;
&lt;p&gt;Katie is a former journalist turned Software Engineer at Red Hat and a co-organiser of the &lt;a href=&quot;http://bfpg.org&quot;&gt;Brisbane Functional Programming Group&lt;/a&gt;.  She says she is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;...mad keen about functional programming and promoting women in technology, passions that combined when she co-founded the &lt;a href=&quot;http://www.lambdaladies.com&quot;&gt;Lambda Ladies group&lt;/a&gt;&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can find the talk &lt;a href=&quot;http://youtu.be/MlZCiiKGbb0&quot;&gt;here on YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Seriously though, the Batman monad would totally destroy the Superman monad in a fight. You know this is true.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/07/03/katie-miller-superhero-monads/&quot;&gt;Katie Miller: Superhero monads&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on July 03, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Ben Kolera: Isolating Side Effects with Monads]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/06/27/ben-kolera-isolating-side-effects-with-monads/"/>
  <id>http://localhost:4000/2013/06/27/ben-kolera-isolating-side-effects-with-monads</id>
  <published>2013-06-27T00:00:00+10:00</published>
  <updated>2013-06-27T00:00:00+10:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#Brisbane%20Functional%20Programming%20Group" term="Brisbane Functional Programming Group" /><category scheme="http://localhost:4000/tags/#effects" term="effects" /><category scheme="http://localhost:4000/tags/#monad" term="monad" /><category scheme="http://localhost:4000/tags/#monad%20transformer" term="monad transformer" /><category scheme="http://localhost:4000/tags/#pure%20functional" term="pure functional" /><category scheme="http://localhost:4000/tags/#reader%20monad" term="reader monad" /><category scheme="http://localhost:4000/tags/#ReaderWriterState%20monad" term="ReaderWriterState monad" /><category scheme="http://localhost:4000/tags/#scala" term="scala" /><category scheme="http://localhost:4000/tags/#scalaz" term="scalaz" /><category scheme="http://localhost:4000/tags/#state%20monad" term="state monad" /><category scheme="http://localhost:4000/tags/#writer%20monad" term="writer monad" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe src=&quot;//player.vimeo.com/video/64796627&quot;
  width=&quot;584&quot; height=&quot;329&quot; frameborder=&quot;0&quot; webkitAllowFullScreen mozallowfullscreen
  allowFullScreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Ben Kolera (&lt;a href=&quot;http://twitter.com/benkolera&quot;&gt;@benkolera&lt;/a&gt;) continues what has almost become a mini-series here at Functional Talks on the &lt;code&gt;Reader&lt;/code&gt;, &lt;code&gt;Writer&lt;/code&gt; and &lt;code&gt;State&lt;/code&gt; monads. He gives, what he describes as a “beginner level talk” which is easy to follow. He takes us on a “refactoring journey” from “imperative” code to “pure” functional code, pointing out that pure functional code needn’t sacrifice state. He uses Scala and Scalaz in his example.&lt;/p&gt;
&lt;p&gt;Ben is a co-organiser of the &lt;a href=&quot;http://bfpg.org&quot;&gt;Brisbane Functional Programming Group&lt;/a&gt; and a web app developer who uses Scala in his day job. He says he:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“…loves how static types and pure functional programming help to create code that is beautiful, concise and yet still can be reasoned about with minimal profanities.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Amen to that.&lt;/p&gt;
&lt;p&gt;You can find the talk &lt;a href=&quot;http://vimeo.com/64796627&quot;&gt;here on vimeo&lt;/a&gt; and slides &lt;a href=&quot;https://github.com/bfpg/bfpg-isolating-effects-with-monads&quot;&gt;here on github&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/06/27/ben-kolera-isolating-side-effects-with-monads/&quot;&gt;Ben Kolera: Isolating Side Effects with Monads&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on June 27, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Brian McKenna: Roy - rescuing JavaScript from itself]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/06/24/brian-mckenna-roy-rescuing-javascript-from-itself/"/>
  <id>http://localhost:4000/2013/06/24/brian-mckenna-roy-rescuing-javascript-from-itself</id>
  <published>2013-06-24T00:00:00+10:00</published>
  <updated>2013-06-24T00:00:00+10:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#altjs" term="altjs" /><category scheme="http://localhost:4000/tags/#haskell" term="haskell" /><category scheme="http://localhost:4000/tags/#javascript" term="javascript" /><category scheme="http://localhost:4000/tags/#roy" term="roy" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/w3ML8wlt1oU?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Brian McKenna (&lt;a href=&quot;http://twitter.com/puffnfresh&quot;&gt;@puffnfresh&lt;/a&gt;) is a man who thinks that JavaScript rightly sucks. Fortunately for us, he was prepared to do something about it. Generations to come will thank him. Enter &lt;a href=&quot;http://roy.brianmckenna.org&quot;&gt;Roy&lt;/a&gt;, an &lt;a href=&quot;http://altjs.org&quot;&gt;altJS&lt;/a&gt; language - that is, a language that compiles down to pure JavaScript. Brian talks through this Haskell-like language which amongst other features is immutable.&lt;/p&gt;
&lt;p&gt;Brian’s day job is being a Scala/JavaScript dev at &lt;a href=&quot;http://precog.com&quot;&gt;Precog&lt;/a&gt;, where he makes BigData obey. He is also the author of &lt;a href=&quot;https://github.com/puffnfresh/fantasy-land&quot;&gt;Fantasy Land&lt;/a&gt; and &lt;a href=&quot;http://bilby.brianmckenna.org&quot;&gt;bilby.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can find the talk &lt;a href=&quot;http://youtu.be/w3ML8wlt1oU&quot;&gt;here on YouTube&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/06/24/brian-mckenna-roy-rescuing-javascript-from-itself/&quot;&gt;Brian McKenna: Roy - rescuing JavaScript from itself&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on June 24, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Chris Ford: Functional Composition (musically speaking)]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/06/22/chris-ford-functional-composition-musically-speaking/"/>
  <id>http://localhost:4000/2013/06/22/chris-ford-functional-composition-musically-speaking</id>
  <published>2013-06-22T00:00:00+10:00</published>
  <updated>2013-06-22T00:00:00+10:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#clojure" term="clojure" /><category scheme="http://localhost:4000/tags/#function%20compostion" term="function compostion" /><category scheme="http://localhost:4000/tags/#music" term="music" />
  <content type="html">
  
    &lt;p&gt;Chris Ford (&lt;a href=&quot;http://twitter.com/ctford&quot;&gt;@ctford&lt;/a&gt;) says, “Clojure is not the art, it is the easel, it is the paint.” What is the art, is the music which Chris masterfully pieces together with function composition in Clojure. This is a mesmerising talk performed by a virtuoso with an in-depth knowledge of both music and functional programming.&lt;/p&gt;
&lt;p&gt;You can find the talk &lt;a href=&quot;http://youtu.be/Mfsnlbd-4xQ&quot;&gt;here on YouTube&lt;/a&gt; and the source can be &lt;a href=&quot;https://github.com/ctford/functional-composition/tree/ClojureConj-2012&quot;&gt;found on github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unfortunately embedding this video is disabled on youtube. Sadly you will have to &lt;a href=&quot;http://youtu.be/Mfsnlbd-4xQ&quot;&gt;click the link&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/06/22/chris-ford-functional-composition-musically-speaking/&quot;&gt;Chris Ford: Functional Composition (musically speaking)&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on June 22, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Paul Chiusano: How to Write a Functional Program with IO, Mutation, and other effects]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/06/20/paul-chiusano-how-to-write-a-functional-program-with-io-mutation-and-other-effects/"/>
  <id>http://localhost:4000/2013/06/20/paul-chiusano-how-to-write-a-functional-program-with-io-mutation-and-other-effects</id>
  <published>2013-06-20T00:00:00+10:00</published>
  <updated>2013-06-20T00:00:00+10:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#effects" term="effects" /><category scheme="http://localhost:4000/tags/#IO%20monad" term="IO monad" /><category scheme="http://localhost:4000/tags/#pure%20functional" term="pure functional" /><category scheme="http://localhost:4000/tags/#scala" term="scala" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/1gZAqJA2pEk?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Paul Chiusano (&lt;a href=&quot;http://twitter.com/pchiusano&quot;&gt;@pchiusano&lt;/a&gt;) shows how we can write Functional programmes whilst having effects such as IO. He gently takes us through a typical imperative programme showing how effects can be minimised and then ultimately derives the IO monad. Paul is a co-author of &lt;a href=&quot;http://manning.com/bjarnason/&quot;&gt;Functional Programming in Scala&lt;/a&gt; and has &lt;a href=&quot;http://pchiusano.blogspot.co.uk/2013/06/a-new-endeavor.html&quot;&gt;just announced&lt;/a&gt; that he is now a freelance Functional Programming consultant.&lt;/p&gt;
&lt;p&gt;You can find the talk &lt;a href=&quot;http://youtu.be/1gZAqJA2pEk&quot;&gt;here on YouTube&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/06/20/paul-chiusano-how-to-write-a-functional-program-with-io-mutation-and-other-effects/&quot;&gt;Paul Chiusano: How to Write a Functional Program with IO, Mutation, and other effects&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on June 20, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Tony Morris: Explain List Folds to Yourself]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/06/19/tony-morris-explain-list-folds-to-yourself/"/>
  <id>http://localhost:4000/2013/06/19/tony-morris-explain-list-folds-to-yourself</id>
  <published>2013-06-19T00:00:00+10:00</published>
  <updated>2013-06-19T00:00:00+10:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#Brisbane%20Functional%20Programming%20Group" term="Brisbane Functional Programming Group" /><category scheme="http://localhost:4000/tags/#fold%20left" term="fold left" /><category scheme="http://localhost:4000/tags/#fold%20right" term="fold right" /><category scheme="http://localhost:4000/tags/#folds" term="folds" /><category scheme="http://localhost:4000/tags/#haskell" term="haskell" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe src=&quot;//player.vimeo.com/video/64673035&quot;
  width=&quot;584&quot; height=&quot;329&quot; frameborder=&quot;0&quot; webkitAllowFullScreen mozallowfullscreen
  allowFullScreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Tony Morris (&lt;a href=&quot;http://twitter.com/dibblego&quot;&gt;@dibblego&lt;/a&gt;) in this talk unfolds list folds. He addresses many questions people have around &lt;code&gt;foldLeft&lt;/code&gt; and &lt;code&gt;foldRight&lt;/code&gt; and more importantly addresses the general misconceptions about these powerful functions. By the end of this talk you will be able to explain folds to yourself and others.&lt;/p&gt;
&lt;p&gt;You can find the talk and slides on &lt;a href=&quot;http://tmorris.net/posts/list-folds-bfpg/index.html&quot;&gt;Tony&#39;s blog&lt;/a&gt; or &lt;a href=&quot;http://vimeo.com/64673035&quot;&gt;here on vimeo&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/06/19/tony-morris-explain-list-folds-to-yourself/&quot;&gt;Tony Morris: Explain List Folds to Yourself&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on June 19, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Rúnar Óli Bjarnason: Dead-Simple Dependency Injection]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/06/17/runar-oli-bjarnason-dead-simple-dependency-injection/"/>
  <id>http://localhost:4000/2013/06/17/runar-oli-bjarnason-dead-simple-dependency-injection</id>
  <published>2013-06-17T00:00:00+10:00</published>
  <updated>2013-06-17T00:00:00+10:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#dependency%20injection" term="dependency injection" /><category scheme="http://localhost:4000/tags/#free%20monad" term="free monad" /><category scheme="http://localhost:4000/tags/#inversion%20of%20control" term="inversion of control" /><category scheme="http://localhost:4000/tags/#ioc" term="ioc" /><category scheme="http://localhost:4000/tags/#Northeast%20Scala%20Symposium" term="Northeast Scala Symposium" /><category scheme="http://localhost:4000/tags/#pure%20functional" term="pure functional" /><category scheme="http://localhost:4000/tags/#reader%20monad" term="reader monad" /><category scheme="http://localhost:4000/tags/#scala" term="scala" /><category scheme="http://localhost:4000/tags/#scalaz" term="scalaz" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/ZasXwtTRkio?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Rúnar Óli Bjarnason (&lt;a href=&quot;http://twitter.com/runarorama&quot;&gt;@runarorama&lt;/a&gt;) wrote the book on Functional Programming, well &lt;a href=&quot;http://manning.com/bjarnason/&quot;&gt;the Scala version&lt;/a&gt; at least. In this talk he shows how the &lt;code&gt;Reader&lt;/code&gt; monad is used to inject dependencies into your Scala code. He starts with showing how functions can be curried and then generalised with &lt;code&gt;Reader&lt;/code&gt; to avoid having your dependencies being explicitly passed around. As he says, “Inversion of control is really just a pretentious way of saying ‘Taking an argument.’”&lt;/p&gt;
&lt;p&gt;It’s quality stuff.&lt;/p&gt;
&lt;p&gt;You can find the talk &lt;a href=&quot;http://youtu.be/ZasXwtTRkio&quot;&gt;here on youtube&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/06/17/runar-oli-bjarnason-dead-simple-dependency-injection/&quot;&gt;Rúnar Óli Bjarnason: Dead-Simple Dependency Injection&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on June 17, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Rich Hickey: Introduction To Clojure]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/06/08/rich-hickey-introduction-to-clojure/"/>
  <id>http://localhost:4000/2013/06/08/rich-hickey-introduction-to-clojure</id>
  <published>2013-06-08T00:00:00+10:00</published>
  <updated>2013-06-08T00:00:00+10:00</updated>
  <author>
    <name>Chris Myers</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#clojure" term="clojure" /><category scheme="http://localhost:4000/tags/#CLR" term="CLR" /><category scheme="http://localhost:4000/tags/#immutability" term="immutability" /><category scheme="http://localhost:4000/tags/#immutable" term="immutable" /><category scheme="http://localhost:4000/tags/#introduction" term="introduction" /><category scheme="http://localhost:4000/tags/#JVM" term="JVM" /><category scheme="http://localhost:4000/tags/#software%20transactional%20memory" term="software transactional memory" /><category scheme="http://localhost:4000/tags/#stm" term="stm" />
  <content type="html">
  
    &lt;p&gt;&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/wASCH_gPnDw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Rich Hickey (&lt;a href=&quot;http://twitter.com/richhickey&quot;&gt;@richhickey&lt;/a&gt;) talks one on one with Brian Beckman about all things Clojure. Clojure is a Lisp dialect that runs both on the CLR and JVM. He describes how it is dynamic, has immutable data with persistent data types and how mutable state is provided by software transactional memory. A great intro into Clojure.&lt;/p&gt;
&lt;p&gt;The talk can be found &lt;a href=&quot;http://youtu.be/wASCH_gPnDw&quot;&gt;on youtube here&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/06/08/rich-hickey-introduction-to-clojure/&quot;&gt;Rich Hickey: Introduction To Clojure&lt;/a&gt; was originally published by Chris Myers at &lt;a href=&quot;http://localhost:4000&quot;&gt;FunctionalTalks.org&lt;/a&gt; on June 08, 2013.&lt;/p&gt;</content>
</entry>

</feed>
